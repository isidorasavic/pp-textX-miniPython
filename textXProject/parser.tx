/*
	Isidora Savic miniPython parser
*/

Program: 
	definitions*=Command 
;

Command :
	FunctionDeclaration| Statement
;

FunctionDeclaration:
	'def' name=ID '(' add_params+=ID[','] ')' ':' body=FunctionBody
;


FunctionBody:
	statements*=Statement statements+=ReturnStatement? ";"
;

ReturnStatement:
	'return' exp=NumericalExpression
;

VariableDeclaration:
	name=ID '=' declaration=NumericalExpression
;

NumericalExpression:
	exp1=Expression AROP exp2=Expression | exp1=Expression
;

Expression:
	name=FunctionCall | name=ID | name=Literal 
;

Literal:
	/\w+/ | '"'/\w+/'"' 
;

ID:
	/[a-zA-Z]*/
;

FunctionCall:
	name=ID '(' params*=Expression[','] ')'
;


Statement:
	statement=FunctionCall |
	statement=VariableDeclaration |
	statement=IfStatement |
	statement=WhileStatement|
	statement=IncrementStatement
;

IfStatement:	
	'if' NumericalExpression RELOP NumericalExpression ':'	Statement+ ElifStatement* ElseStatement?

;

ElifStatement:
	'elif' NumericalExpression RELOP NumericalExpression ':' Statement+
;

ElseStatement:
	'else' ':'	Statement+
;

WhileStatement:
	'while' Expression RELOP Expression ':' Statement+
;

IncrementStatement:
	name=ID INCREMENT Expression
;

INCREMENT:
	'+=' | '-='
;

AROP:
	'+' | '-' | '*' | '/' 
;

RELOP:
	'==' | '<=' | '>=' | '!=' | '<' | '>' 
;
